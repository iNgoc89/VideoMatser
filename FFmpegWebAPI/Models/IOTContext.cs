// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FFmpegWebAPI.Models;

public partial class IOTContext : DbContext
{
    public IOTContext(DbContextOptions<IOTContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Camera> Cameras { get; set; }

    public virtual DbSet<CameraRecognition> CameraRecognitions { get; set; }

    public virtual DbSet<Group> Groups { get; set; }

    public virtual DbSet<GroupCamera> GroupCameras { get; set; }

    public virtual DbSet<VideoCamera> VideoCameras { get; set; }

    public virtual DbSet<ConcatVideoCamera> ConcatVideoCameras { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .HasDefaultSchema("cmrs")
            .UseCollation("Latin1_General_100_CI_AS_SC");

        modelBuilder.Entity<Camera>(entity =>
        {
            entity.ToTable("Camera", "cmrs");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.IpAddress)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("((1))");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RtspUrl)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<CameraRecognition>(entity =>
        {
            entity.ToTable("CameraRecognition", "cmrs");

            entity.HasIndex(e => e.CameraId, "IX_CameraRecognition_CameraId");

            entity.Property(e => e.PlateImageUri)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.VehicleCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.VehicleImageUri)
                .IsRequired()
                .HasMaxLength(500);

            entity.HasOne(d => d.Camera).WithMany(p => p.CameraRecognitions).HasForeignKey(d => d.CameraId);
        });

        modelBuilder.Entity<Group>(entity =>
        {
            entity.ToTable("Group", "cmrs");

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<GroupCamera>(entity =>
        {
            entity.ToTable("GroupCamera", "cmrs");

            entity.HasIndex(e => e.CameraId, "IX_GroupCamera_CameraId");

            entity.HasIndex(e => e.GroupId, "IX_GroupCamera_GroupId");

            entity.HasOne(d => d.Camera).WithMany(p => p.GroupCameras).HasForeignKey(d => d.CameraId);

            entity.HasOne(d => d.Group).WithMany(p => p.GroupCameras).HasForeignKey(d => d.GroupId);
        });

        modelBuilder.Entity<VideoCamera>(entity =>
        {
            entity.ToTable("VideoCamera", "cmrs");

            entity.Property(e => e.CameraId)
                .IsRequired();

            entity.Property(e => e.VideoUri)
                .IsRequired()
                .HasMaxLength(250);

            entity.Property(e => e.BeginDate)
                .IsRequired();

            entity.Property(e => e.EndDate)
                .IsRequired();

            entity.Property(e => e.Status)
                .IsRequired();

        });
        modelBuilder.Entity<ConcatVideoCamera>(entity =>
        {
            entity.ToTable("ConcatVideoCamera", "cmrs");

         

        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}